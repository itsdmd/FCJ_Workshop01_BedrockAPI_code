AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template for Cognito, API Gateway, Lambda, and Secrets Manager integration.

Parameters:
  RegionName:
    Type: String
    Description: The AWS region where the resources will be deployed.
    Default: us-east-1

  InferenceProfileId:
    Type: String
    Description: The inference profile ID for the Lambda function.
    Default: us.anthropic.claude-3-haiku-20240307-v1:0

  S3Bucket:
    Type: String
    Description: The S3 bucket where the Lambda function code will be stored.
    Default: fcj-workshop-bedrockapi

  SecretName:
    Type: String
    Description: The name of the secret in AWS Secrets Manager.
    Default: BedrockApiWs_awsKeys

Resources:
  BedrockApiWsApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: BedrockApiWsRestApi
      Description: API Gateway to receive REST requests

  BedrockApiWsApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BedrockApiWsApiGateway
      ParentId: !GetAtt BedrockApiWsApiGateway.RootResourceId
      PathPart: "message"

  BedrockApiWsApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BedrockApiWsApiGateway
      ResourceId: !Ref BedrockApiWsApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BedrockApiWsLambdaFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200

  BedrockApiWsApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref BedrockApiWsApiGateway
      Description: "Automatic deployment for test environment"
    DependsOn: BedrockApiWsApiMethod

  BedrockApiWsApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: "test"
      RestApiId: !Ref BedrockApiWsApiGateway
      DeploymentId: !Ref BedrockApiWsApiDeployment

  BedrockApiWsApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: BedrockApiWsAllowLambdaInvoke
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "lambda:InvokeFunction"
                Resource: !GetAtt BedrockApiWsLambdaFunction.Arn

  BedrockApiWsLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: BedrockApiWsLambdaFunction
      Handler: invokeBedrock.lambda_handler
      Role: !GetAtt BedrockApiWsLambdaExecutionRole.Arn
      Code:
        S3Bucket: !Sub "${S3Bucket}"
        S3Key: invokeBedrock.zip
      Runtime: python3.8
      Timeout: 120
      Environment:
        Variables:
          REGION_NAME: !Ref RegionName
          INFERENCE_PROFILE_ID: !Ref InferenceProfileId
          SECRET_NAME: !Sub "${SecretName}"

  BedrockApiWsLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: BedrockApiWsAllowSecretsManagerAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "secretsmanager:GetSecretValue"
                Resource: !Ref BedrockApiWsSMSecret

  BedrockApiWsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt BedrockApiWsLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BedrockApiWsApiGateway}/*/POST/message"

  BedrockApiWsSMSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${SecretName}"
      Description: "Contains AWS_ACCESS_KEY and AWS_SECRET_KEY"
      SecretString: '{"AWS_ACCESS_KEY":"your-access-key","AWS_SECRET_KEY":"your-secret-key"}'

Outputs:
  ApiGatewayInvokeURL:
    Description: "URL to invoke the API Gateway"
    Value: !Sub "https://${BedrockApiWsApiGateway}.execute-api.${AWS::Region}.amazonaws.com/test/message"

  ApiGatewayConsoleURL:
    Description: "URL to the API Gateway Resources page in the AWS Management Console"
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/apigateway/home?region=${AWS::Region}/apis/${BedrockApiWsApiGateway}/resources"

  CognitoUserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref BedrockApiWsCognitoUserPool
